import { PassThrough } from "stream";
import type { EntryContext } from "@remix-run/node";
import { Response } from "@remix-run/node";
import { RemixServer } from "@remix-run/react";
import isbot from "isbot";
import { renderToPipeableStream } from "react-dom/server";

const ABORT_DELAY = 5000;

/**
 * Handles an incoming request based on whether it is from a bot or a browser.
 * If the request is from a bot, it is passed to the handleBotRequest function.
 * If the request is from a browser, it is passed to the handleBrowserRequest function.
 * @param {Request} request - The incoming request object.
 * @param {number} responseStatusCode - The status code to be returned in the response.
 * @param {Headers} responseHeaders - The headers to be included in the response.
 * @param {EntryContext} remixContext - The context object for the request.
 * @returns The response generated by either the handleBotRequest or handleBrowserRequest function.
 */
export default function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return isbot(request.headers.get("user-agent"))
    ? handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )
    : handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      );
}

/**
 * Handles a bot request by rendering the RemixServer component and returning a Promise
 * that resolves to a Response object.
 * @param {Request} request - The request object received from the client.
 * @param {number} responseStatusCode - The status code to be included in the response.
 * @param {Headers} responseHeaders - The headers to be included in the response.
 * @param {EntryContext} remixContext - The Remix context object.
 * @returns {Promise<Response>} A Promise that resolves to a Response object.
 */
function handleBotRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let didError = false;

    const { pipe, abort } = renderToPipeableStream(
      <RemixServer context={remixContext} url={request.url} />,
      {
        onAllReady() {
          const body = new PassThrough();

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(body, {
              headers: responseHeaders,
              status: didError ? 500 : responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          didError = true;

          console.error(error);
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

/**
 * Handles a browser request by rendering a RemixServer component and returning a Promise
 * that resolves to a Response object.
 * @param {Request} request - The request object representing the incoming browser request.
 * @param {number} responseStatusCode - The status code to be set in the response.
 * @param {Headers} responseHeaders - The headers to be set in the response.
 * @param {EntryContext} remixContext - The Remix context object.
 * @returns {Promise<Response>} A Promise that resolves to a Response object.
 */
function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let didError = false;

    const { pipe, abort } = renderToPipeableStream(
      <RemixServer context={remixContext} url={request.url} />,
      {
        onShellReady() {
          const body = new PassThrough();

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(body, {
              headers: responseHeaders,
              status: didError ? 500 : responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(err: unknown) {
          reject(err);
        },
        onError(error: unknown) {
          didError = true;

          console.error(error);
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}
